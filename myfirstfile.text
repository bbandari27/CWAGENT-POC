Hey this is my first file

Hey even i can change the file now hahah!
this is shravan and I can do changes in the file. 

In future, more developers can do changes :) 


# Creates midserver with basic configuration with the instance profile, IAM policy, role for Servicenow Discovery.

# IAM Role for midserver Discovery 

resource "aws_iam_role" "midserver_discovery_role" {
 name   = "midserver_discovery_role"
 tags = merge(
  local.standard_tags
 )
 assume_role_policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "ec2.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
EOF
}

# IAM policy for midserver Discovery

resource "aws_iam_policy" "midserver_discovery_policy" {

  name         = "midserver_discovery_policy"
  path         = "/"
  description  = "IAM policy for midserver_discovery"
  tags = merge(
    local.standard_tags
  )
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PermissionsNeededForDiscovery",
            "Effect": "Allow",
            "Action": [
                "account:ListRegions",
                "apigateway:GET",
                "application-autoscaling:Describe*",
                "autoscaling:Describe*",
                "autoscaling-plans:Describe*",
                "cloudformation:DescribeStack*",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "dynamodb:Describe*",
                "dynamodb:ListTables",
                "ec2:Describe*",
                "ec2:ReportInstanceStatus",
                "ecs:Describe*",
                "ecs:List*",
                "elasticloadbalancing:Describe*",
                "elasticache:Describe*",
                "elasticache:List*",
                "eks:Describe*",
                "eks:List*",
                "elasticfilesystem:Describe*",
                "lambda:Get*",
                "lambda:List*",
                "rds:Describe*",
                "redshift:Describe*",
                "route53domains:List*",
                "s3:List*",
                "s3:GetAccountPublicAccessBlock",
                "s3:GetBucket*",
                "s3:Get*",
                "sdb:GetAttributes",
                "sns:List*",
                "sns:GetEndpointAttributes",
                "sns:GetSubscriptionAttributes",
                "organizations:Describe*",
                "organizations:List*"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

# IAM policy for midserver Discovery

resource "aws_iam_policy" "midserver_getsecret_policy" {

  name         = "midserver_getsecret_policy"
  path         = "/"
  description  = "IAM policy for midserver_getsecret"
  tags = merge(
    local.standard_tags
  )
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "GetServiceNowSecrets",
            "Effect": "Allow",
            "Action": [
                "secretsmanager:List*",
                "secretsmanager:Get*",
                "secretsmanager:Describe*"
            ],
            "Resource": [
                "arn:aws:secretsmanager:us-east-1:*:secret:devops/servicenow/*"
            ]
        }
    ]
}
EOF
}

# midserver_discovery_policy Attachment on the midserver_discovery_role.

resource "aws_iam_role_policy_attachment" "policy_attach" {
  role        = aws_iam_role.midserver_discovery_role.name
  policy_arn  = aws_iam_policy.midserver_discovery_policy.arn
}

# midserver_getsecret_policy Attachment on the midserver_discovery_role.

resource "aws_iam_role_policy_attachment" "policy_attach" {
  role        = aws_iam_role.midserver_discovery_role.name
  policy_arn  = aws_iam_policy.midserver_getsecret_policy.arn
}

# SSM_managed_policy Attachment on the midserver_discovery_role.

resource "aws_iam_role_policy_attachment" "policy_attach" {
  role        = aws_iam_role.midserver_discovery_role.name
  policy_arn  = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

# common_access_policy Attachment on the midserver_discovery_role.

resource "aws_iam_role_policy_attachment" "policy_attach" {
  role        = aws_iam_role.midserver_discovery_role.name
  policy_arn  = local.common_access_policy_arn
}

# instance_profile for the MID server EC2 Instance

resource "aws_iam_instance_profile" "MID_instance_profile" {
  name = "MID_instance_profile"
  role = aws_iam_role.midserver_discovery_role.name
}

# security group for the MID server

resource "aws_security_group" "midserver_sg" {
  name        = "midserver_sg"
  description = "security group for MID Server"
  vpc_id      = local.vpc_id
  ingress {
    description      = "Open hhtps to Internet"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["10.0.0.0/8"]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }
  tags = merge(
    local.standard_tags
  )
}

# EC2 instance for MID server

resource "aws_instance" "MIDserver" {
  ami           = "ami-0b0af3577fe5e3532" # us-east-1
  instance_type = "c5.xlarge"
  tags = merge(
    local.standard_tags
  )
  subnet_id = local.subnet_id
  iam_instance_profile = aws_iam_instance_profile.MID_instance_profile.name
  vpc_security_group_ids = [
    aws_security_group.midserver_sg.id
  ]
  user_data = filebase64("userdata.sh")
}

# create secrets in secretsmanager for the midserver configuratoion details 

resource "aws_secretsmanager_secret" "example" {
  name = "example"
}
